{"ast":null,"code":"import addLife, { createLifePack } from \"@rpldy/life-events\";\nimport { invariant, logger, triggerCancellable, devFreeze, merge, clone } from \"@rpldy/shared\";\nimport getAbortEnhancer from \"@rpldy/abort\";\nimport getProcessor from \"./processor\";\nimport { UPLOADER_EVENTS } from \"./consts\";\nimport { getMandatoryOptions, deepProxyUnwrap } from \"./utils\";\nimport composeEnhancers from \"./composeEnhancers\";\nconst EVENT_NAMES = Object.values(UPLOADER_EVENTS);\nconst EXT_OUTSIDE_ENHANCER_TIME = \"Uploady - uploader extensions can only be registered by enhancers\",\n  EXT_ALREADY_EXISTS = \"Uploady - uploader extension by this name [%s] already exists\";\nlet counter = 0;\nconst getComposedEnhancer = extEnhancer => composeEnhancers(getAbortEnhancer(), extEnhancer);\nconst getEnhancedUploader = (uploader, options, triggerWithUnwrap, setEnhancerTime) => {\n  const enhancer = options.enhancer ? getComposedEnhancer(options.enhancer) : getAbortEnhancer();\n  setEnhancerTime(true);\n  const enhanced = enhancer(uploader, triggerWithUnwrap);\n  setEnhancerTime(false);\n  return enhanced || uploader;\n};\nconst createUploader = options => {\n  counter += 1;\n  const uploaderId = `uploader-${counter}`;\n  let enhancerTime = false;\n  const extensions = {};\n  logger.debugLog(`uploady.uploader: creating new instance (${uploaderId})`, {\n    options,\n    counter\n  });\n  let uploaderOptions = getMandatoryOptions(options);\n  const clearPending = () => {\n    processor.clearPendingBatches();\n  };\n  const getOptions = () => {\n    return clone(uploaderOptions);\n  };\n  let {\n    trigger,\n    target: uploader\n  } = addLife({\n    id: uploaderId,\n    update: updateOptions => {\n      uploaderOptions = merge({}, uploaderOptions, updateOptions);\n      return uploader;\n    },\n    add: (files, addOptions) => {\n      const processOptions = merge({}, uploaderOptions, addOptions);\n      if (processOptions.clearPendingOnAdd) {\n        clearPending();\n      }\n      return processor.addNewBatch(files, processOptions).then(() => {\n        logger.debugLog(`uploady.uploader: finished adding file data to be processed`);\n      });\n    },\n    upload: uploadOptions => {\n      processor.processPendingBatches(uploadOptions);\n    },\n    abort: id => {\n      processor.abort(id);\n    },\n    abortBatch: id => {\n      processor.abortBatch(id);\n    },\n    getOptions,\n    clearPending,\n    registerExtension: (name, methods) => {\n      invariant(enhancerTime, EXT_OUTSIDE_ENHANCER_TIME);\n      invariant(!extensions[name], EXT_ALREADY_EXISTS, name);\n      logger.debugLog(`uploady.uploader: registering extension: ${name.toString()}`, methods);\n      extensions[name] = methods;\n    },\n    getExtension: name => {\n      return extensions[name];\n    }\n  }, EVENT_NAMES, {\n    canAddEvents: false,\n    canRemoveEvents: false\n  });\n  const triggerWithUnwrap = (name, ...data) => {\n    const lp = createLifePack(() => data.map(deepProxyUnwrap));\n    return trigger(name, lp);\n  };\n  const cancellable = triggerCancellable(triggerWithUnwrap);\n  const enhancedUploader = getEnhancedUploader(uploader, uploaderOptions, triggerWithUnwrap, state => {\n    enhancerTime = state;\n  });\n  const processor = getProcessor(triggerWithUnwrap, cancellable, uploaderOptions, enhancedUploader.id);\n  return devFreeze(enhancedUploader);\n};\nexport default createUploader;","map":{"version":3,"names":["addLife","createLifePack","invariant","logger","triggerCancellable","devFreeze","merge","clone","getAbortEnhancer","getProcessor","UPLOADER_EVENTS","getMandatoryOptions","deepProxyUnwrap","composeEnhancers","EVENT_NAMES","Object","values","EXT_OUTSIDE_ENHANCER_TIME","EXT_ALREADY_EXISTS","counter","getComposedEnhancer","extEnhancer","getEnhancedUploader","uploader","options","triggerWithUnwrap","setEnhancerTime","enhancer","enhanced","createUploader","uploaderId","enhancerTime","extensions","debugLog","uploaderOptions","clearPending","processor","clearPendingBatches","getOptions","trigger","target","id","update","updateOptions","add","files","addOptions","processOptions","clearPendingOnAdd","addNewBatch","then","upload","uploadOptions","processPendingBatches","abort","abortBatch","registerExtension","name","methods","toString","getExtension","canAddEvents","canRemoveEvents","data","lp","map","cancellable","enhancedUploader","state"],"sources":["C:/Users/y2006/OneDrive/바탕 화면/poba/poba/node_modules/@rpldy/uploader/lib/esm/uploader.js"],"sourcesContent":["import addLife, { createLifePack } from \"@rpldy/life-events\";\nimport { invariant, logger, triggerCancellable, devFreeze, merge, clone } from \"@rpldy/shared\";\nimport getAbortEnhancer from \"@rpldy/abort\";\nimport getProcessor from \"./processor\";\nimport { UPLOADER_EVENTS } from \"./consts\";\nimport { getMandatoryOptions, deepProxyUnwrap } from \"./utils\";\nimport composeEnhancers from \"./composeEnhancers\";\nconst EVENT_NAMES = Object.values(UPLOADER_EVENTS);\nconst EXT_OUTSIDE_ENHANCER_TIME = \"Uploady - uploader extensions can only be registered by enhancers\",\n  EXT_ALREADY_EXISTS = \"Uploady - uploader extension by this name [%s] already exists\";\nlet counter = 0;\nconst getComposedEnhancer = extEnhancer => composeEnhancers(getAbortEnhancer(), extEnhancer);\nconst getEnhancedUploader = (uploader, options, triggerWithUnwrap, setEnhancerTime) => {\n  const enhancer = options.enhancer ? getComposedEnhancer(options.enhancer) : getAbortEnhancer();\n  setEnhancerTime(true);\n  const enhanced = enhancer(uploader, triggerWithUnwrap);\n  setEnhancerTime(false);\n  return enhanced || uploader;\n};\nconst createUploader = options => {\n  counter += 1;\n  const uploaderId = `uploader-${counter}`;\n  let enhancerTime = false;\n  const extensions = {};\n  logger.debugLog(`uploady.uploader: creating new instance (${uploaderId})`, {\n    options,\n    counter\n  });\n  let uploaderOptions = getMandatoryOptions(options);\n  const clearPending = () => {\n    processor.clearPendingBatches();\n  };\n  const getOptions = () => {\n    return clone(uploaderOptions);\n  };\n  let {\n    trigger,\n    target: uploader\n  } = addLife({\n    id: uploaderId,\n    update: updateOptions => {\n      uploaderOptions = merge({}, uploaderOptions, updateOptions);\n      return uploader;\n    },\n    add: (files, addOptions) => {\n      const processOptions = merge({}, uploaderOptions, addOptions);\n      if (processOptions.clearPendingOnAdd) {\n        clearPending();\n      }\n      return processor.addNewBatch(files, processOptions).then(() => {\n        logger.debugLog(`uploady.uploader: finished adding file data to be processed`);\n      });\n    },\n    upload: uploadOptions => {\n      processor.processPendingBatches(uploadOptions);\n    },\n    abort: id => {\n      processor.abort(id);\n    },\n    abortBatch: id => {\n      processor.abortBatch(id);\n    },\n    getOptions,\n    clearPending,\n    registerExtension: (name, methods) => {\n      invariant(enhancerTime, EXT_OUTSIDE_ENHANCER_TIME);\n      invariant(!extensions[name], EXT_ALREADY_EXISTS, name);\n      logger.debugLog(`uploady.uploader: registering extension: ${name.toString()}`, methods);\n      extensions[name] = methods;\n    },\n    getExtension: name => {\n      return extensions[name];\n    }\n  }, EVENT_NAMES, {\n    canAddEvents: false,\n    canRemoveEvents: false\n  });\n  const triggerWithUnwrap = (name, ...data) => {\n    const lp = createLifePack(() => data.map(deepProxyUnwrap));\n    return trigger(name, lp);\n  };\n  const cancellable = triggerCancellable(triggerWithUnwrap);\n  const enhancedUploader = getEnhancedUploader(uploader, uploaderOptions, triggerWithUnwrap, state => {\n    enhancerTime = state;\n  });\n  const processor = getProcessor(triggerWithUnwrap, cancellable, uploaderOptions, enhancedUploader.id);\n  return devFreeze(enhancedUploader);\n};\nexport default createUploader;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}