{"ast":null,"code":"import { FILE_STATES, logger } from \"@rpldy/shared\";\nimport { UPLOADER_EVENTS, ITEM_FINALIZE_STATES } from \"../consts\";\nimport { cleanUpFinishedBatches, incrementBatchFinishedCounter, getBatchDataFromItemId } from \"./batchHelpers\";\nimport { finalizeItem } from \"./itemHelpers\";\nexport const FILE_STATE_TO_EVENT_MAP = {\n  [FILE_STATES.PENDING]: null,\n  [FILE_STATES.ADDED]: UPLOADER_EVENTS.ITEM_START,\n  [FILE_STATES.FINISHED]: UPLOADER_EVENTS.ITEM_FINISH,\n  [FILE_STATES.ERROR]: UPLOADER_EVENTS.ITEM_ERROR,\n  [FILE_STATES.CANCELLED]: UPLOADER_EVENTS.ITEM_CANCEL,\n  [FILE_STATES.ABORTED]: UPLOADER_EVENTS.ITEM_ABORT,\n  [FILE_STATES.UPLOADING]: UPLOADER_EVENTS.ITEM_PROGRESS\n};\nconst getIsFinalized = item => !!~ITEM_FINALIZE_STATES.indexOf(item.state);\nconst processFinishedRequest = (queue, finishedData, next) => {\n  finishedData.forEach(itemData => {\n    const state = queue.getState();\n    const {\n      id,\n      info\n    } = itemData;\n    logger.debugLog(\"uploader.processor.queue: request finished for item - \", {\n      id,\n      info\n    });\n    if (state.items[id]) {\n      queue.updateState(state => {\n        const item = state.items[id];\n        item.state = info.state;\n        item.uploadResponse = info.response;\n        item.uploadStatus = info.status;\n        if (getIsFinalized(item)) {\n          delete state.aborts[id];\n        }\n      });\n      const item = queue.getState().items[id];\n      if (info.state === FILE_STATES.FINISHED && item.completed < 100) {\n        const size = item.file?.size || 0;\n        queue.handleItemProgress(item, 100, size, size);\n      }\n      const {\n        batchOptions\n      } = getBatchDataFromItemId(queue, id);\n      if (FILE_STATE_TO_EVENT_MAP[item.state]) {\n        queue.trigger(FILE_STATE_TO_EVENT_MAP[item.state], item, batchOptions);\n      }\n      if (getIsFinalized(item)) {\n        incrementBatchFinishedCounter(queue, item.batchId);\n        queue.trigger(UPLOADER_EVENTS.ITEM_FINALIZE, item, batchOptions);\n      }\n    }\n    finalizeItem(queue, id);\n  });\n  cleanUpFinishedBatches(queue);\n  next(queue);\n};\nexport default processFinishedRequest;","map":{"version":3,"names":["FILE_STATES","logger","UPLOADER_EVENTS","ITEM_FINALIZE_STATES","cleanUpFinishedBatches","incrementBatchFinishedCounter","getBatchDataFromItemId","finalizeItem","FILE_STATE_TO_EVENT_MAP","PENDING","ADDED","ITEM_START","FINISHED","ITEM_FINISH","ERROR","ITEM_ERROR","CANCELLED","ITEM_CANCEL","ABORTED","ITEM_ABORT","UPLOADING","ITEM_PROGRESS","getIsFinalized","item","indexOf","state","processFinishedRequest","queue","finishedData","next","forEach","itemData","getState","id","info","debugLog","items","updateState","uploadResponse","response","uploadStatus","status","aborts","completed","size","file","handleItemProgress","batchOptions","trigger","batchId","ITEM_FINALIZE"],"sources":["C:/Users/y2006/OneDrive/바탕 화면/poba/poba/node_modules/@rpldy/uploader/lib/esm/queue/processFinishedRequest.js"],"sourcesContent":["import { FILE_STATES, logger } from \"@rpldy/shared\";\nimport { UPLOADER_EVENTS, ITEM_FINALIZE_STATES } from \"../consts\";\nimport { cleanUpFinishedBatches, incrementBatchFinishedCounter, getBatchDataFromItemId } from \"./batchHelpers\";\nimport { finalizeItem } from \"./itemHelpers\";\nexport const FILE_STATE_TO_EVENT_MAP = {\n  [FILE_STATES.PENDING]: null,\n  [FILE_STATES.ADDED]: UPLOADER_EVENTS.ITEM_START,\n  [FILE_STATES.FINISHED]: UPLOADER_EVENTS.ITEM_FINISH,\n  [FILE_STATES.ERROR]: UPLOADER_EVENTS.ITEM_ERROR,\n  [FILE_STATES.CANCELLED]: UPLOADER_EVENTS.ITEM_CANCEL,\n  [FILE_STATES.ABORTED]: UPLOADER_EVENTS.ITEM_ABORT,\n  [FILE_STATES.UPLOADING]: UPLOADER_EVENTS.ITEM_PROGRESS\n};\nconst getIsFinalized = item => !!~ITEM_FINALIZE_STATES.indexOf(item.state);\nconst processFinishedRequest = (queue, finishedData, next) => {\n  finishedData.forEach(itemData => {\n    const state = queue.getState();\n    const {\n      id,\n      info\n    } = itemData;\n    logger.debugLog(\"uploader.processor.queue: request finished for item - \", {\n      id,\n      info\n    });\n    if (state.items[id]) {\n      queue.updateState(state => {\n        const item = state.items[id];\n        item.state = info.state;\n        item.uploadResponse = info.response;\n        item.uploadStatus = info.status;\n        if (getIsFinalized(item)) {\n          delete state.aborts[id];\n        }\n      });\n      const item = queue.getState().items[id];\n      if (info.state === FILE_STATES.FINISHED && item.completed < 100) {\n        const size = item.file?.size || 0;\n        queue.handleItemProgress(item, 100, size, size);\n      }\n      const {\n        batchOptions\n      } = getBatchDataFromItemId(queue, id);\n      if (FILE_STATE_TO_EVENT_MAP[item.state]) {\n        queue.trigger(FILE_STATE_TO_EVENT_MAP[item.state], item, batchOptions);\n      }\n      if (getIsFinalized(item)) {\n        incrementBatchFinishedCounter(queue, item.batchId);\n        queue.trigger(UPLOADER_EVENTS.ITEM_FINALIZE, item, batchOptions);\n      }\n    }\n    finalizeItem(queue, id);\n  });\n  cleanUpFinishedBatches(queue);\n  next(queue);\n};\nexport default processFinishedRequest;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}