{"ast":null,"code":"import React from \"react\";\nimport { logger, invariant } from \"@rpldy/shared\";\nimport { registerUploadyContextVersion } from \"./uploadyVersion\";\nconst UploadyContext = /*#__PURE__*/React.createContext(null);\nconst NO_INPUT_ERROR_MSG = \"Uploady - Context. File input isn't available\";\nexport const createContextApi = (uploader, internalInputRef) => {\n  let fileInputRef, showFileUploadOptions;\n  let isUsingExternalInput = false;\n  if (internalInputRef) {\n    fileInputRef = internalInputRef;\n  } else {\n    logger.debugLog(\"Uploady context - didn't receive input field ref - waiting for external ref\");\n  }\n  const getInputField = () => fileInputRef?.current;\n  const getInternalFileInput = () => {\n    if (fileInputRef) {\n      isUsingExternalInput = true;\n    }\n    return fileInputRef;\n  };\n  const getIsUsingExternalInput = () => isUsingExternalInput;\n  const onFileInputChange = () => {\n    const input = getInputField();\n    invariant(input, NO_INPUT_ERROR_MSG);\n    input.removeEventListener(\"change\", onFileInputChange);\n    const addOptions = showFileUploadOptions;\n    showFileUploadOptions = null;\n    upload(input.files, addOptions);\n  };\n  const upload = (files, addOptions) => {\n    uploader.add(files, addOptions);\n  };\n  registerUploadyContextVersion();\n  return {\n    hasUploader: () => !!uploader,\n    getInternalFileInput,\n    setExternalFileInput: extRef => {\n      isUsingExternalInput = true;\n      fileInputRef = extRef;\n    },\n    getIsUsingExternalInput,\n    showFileUpload: addOptions => {\n      const input = getInputField();\n      invariant(input, NO_INPUT_ERROR_MSG);\n      showFileUploadOptions = addOptions;\n      input.removeEventListener(\"change\", onFileInputChange);\n      input.addEventListener(\"change\", onFileInputChange);\n      input.value = \"\";\n      input.click();\n    },\n    upload,\n    processPending: uploadOptions => {\n      uploader.upload(uploadOptions);\n    },\n    clearPending: () => {\n      uploader.clearPending();\n    },\n    setOptions: options => {\n      uploader.update(options);\n    },\n    getOptions: () => {\n      return uploader.getOptions();\n    },\n    getExtension: name => {\n      return uploader.getExtension(name);\n    },\n    abort: itemId => {\n      uploader.abort(itemId);\n    },\n    abortBatch: batchId => {\n      uploader.abortBatch(batchId);\n    },\n    on: (name, cb) => {\n      return uploader.on(name, cb);\n    },\n    once: (name, cb) => {\n      return uploader.once(name, cb);\n    },\n    off: (name, cb) => {\n      return uploader.off(name, cb);\n    }\n  };\n};\nexport default UploadyContext;","map":{"version":3,"names":["React","logger","invariant","registerUploadyContextVersion","UploadyContext","createContext","NO_INPUT_ERROR_MSG","createContextApi","uploader","internalInputRef","fileInputRef","showFileUploadOptions","isUsingExternalInput","debugLog","getInputField","current","getInternalFileInput","getIsUsingExternalInput","onFileInputChange","input","removeEventListener","addOptions","upload","files","add","hasUploader","setExternalFileInput","extRef","showFileUpload","addEventListener","value","click","processPending","uploadOptions","clearPending","setOptions","options","update","getOptions","getExtension","name","abort","itemId","abortBatch","batchId","on","cb","once","off"],"sources":["C:/Users/y2006/OneDrive/바탕 화면/poba/poba/node_modules/@rpldy/shared-ui/lib/esm/UploadyContext.js"],"sourcesContent":["import React from \"react\";\nimport { logger, invariant } from \"@rpldy/shared\";\nimport { registerUploadyContextVersion } from \"./uploadyVersion\";\nconst UploadyContext = /*#__PURE__*/React.createContext(null);\nconst NO_INPUT_ERROR_MSG = \"Uploady - Context. File input isn't available\";\nexport const createContextApi = (uploader, internalInputRef) => {\n  let fileInputRef, showFileUploadOptions;\n  let isUsingExternalInput = false;\n  if (internalInputRef) {\n    fileInputRef = internalInputRef;\n  } else {\n    logger.debugLog(\"Uploady context - didn't receive input field ref - waiting for external ref\");\n  }\n  const getInputField = () => fileInputRef?.current;\n  const getInternalFileInput = () => {\n    if (fileInputRef) {\n      isUsingExternalInput = true;\n    }\n    return fileInputRef;\n  };\n  const getIsUsingExternalInput = () => isUsingExternalInput;\n  const onFileInputChange = () => {\n    const input = getInputField();\n    invariant(input, NO_INPUT_ERROR_MSG);\n    input.removeEventListener(\"change\", onFileInputChange);\n    const addOptions = showFileUploadOptions;\n    showFileUploadOptions = null;\n    upload(input.files, addOptions);\n  };\n  const upload = (files, addOptions) => {\n    uploader.add(files, addOptions);\n  };\n  registerUploadyContextVersion();\n  return {\n    hasUploader: () => !!uploader,\n    getInternalFileInput,\n    setExternalFileInput: extRef => {\n      isUsingExternalInput = true;\n      fileInputRef = extRef;\n    },\n    getIsUsingExternalInput,\n    showFileUpload: addOptions => {\n      const input = getInputField();\n      invariant(input, NO_INPUT_ERROR_MSG);\n      showFileUploadOptions = addOptions;\n      input.removeEventListener(\"change\", onFileInputChange);\n      input.addEventListener(\"change\", onFileInputChange);\n      input.value = \"\";\n      input.click();\n    },\n    upload,\n    processPending: uploadOptions => {\n      uploader.upload(uploadOptions);\n    },\n    clearPending: () => {\n      uploader.clearPending();\n    },\n    setOptions: options => {\n      uploader.update(options);\n    },\n    getOptions: () => {\n      return uploader.getOptions();\n    },\n    getExtension: name => {\n      return uploader.getExtension(name);\n    },\n    abort: itemId => {\n      uploader.abort(itemId);\n    },\n    abortBatch: batchId => {\n      uploader.abortBatch(batchId);\n    },\n    on: (name, cb) => {\n      return uploader.on(name, cb);\n    },\n    once: (name, cb) => {\n      return uploader.once(name, cb);\n    },\n    off: (name, cb) => {\n      return uploader.off(name, cb);\n    }\n  };\n};\nexport default UploadyContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}